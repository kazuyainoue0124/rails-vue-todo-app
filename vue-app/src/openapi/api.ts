/* tslint:disable */
/* eslint-disable */
/**
 * APIv1
 * APIv1 for todo-app rails
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface PostRequestTodo
 */
export interface PostRequestTodo {
    /**
     * 
     * @type {string}
     * @memberof PostRequestTodo
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PostRequestTodo
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PutRequestTodo
 */
export interface PutRequestTodo {
    /**
     * 
     * @type {number}
     * @memberof PutRequestTodo
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PutRequestTodo
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PutRequestTodo
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ResponseTodo
 */
export interface ResponseTodo {
    /**
     * 
     * @type {number}
     * @memberof ResponseTodo
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ResponseTodo
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseTodo
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResponseTodo
     */
    'done': boolean;
}
/**
 * 
 * @export
 * @interface ResponseTodos
 */
export interface ResponseTodos {
    /**
     * 
     * @type {Array<ResponseTodo>}
     * @memberof ResponseTodos
     */
    'todos': Array<ResponseTodo>;
}

/**
 * TodoApi - axios parameter creator
 * @export
 */
export const TodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary IDでTodoを削除する
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DeleteTodoById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1DeleteTodoById', 'id', id)
            const localVarPath = `/api/v1/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary IDでTodoを取得する
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GetTodoById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1GetTodoById', 'id', id)
            const localVarPath = `/api/v1/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 全てのTodoを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GetTodos: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Todoを作成する
         * @param {PostRequestTodo} postRequestTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostTodos: async (postRequestTodo: PostRequestTodo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRequestTodo' is not null or undefined
            assertParamExists('apiV1PostTodos', 'postRequestTodo', postRequestTodo)
            const localVarPath = `/api/v1/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRequestTodo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Todoを更新する
         * @param {PutRequestTodo} putRequestTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PutTodos: async (putRequestTodo: PutRequestTodo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'putRequestTodo' is not null or undefined
            assertParamExists('apiV1PutTodos', 'putRequestTodo', putRequestTodo)
            const localVarPath = `/api/v1/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putRequestTodo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoApi - functional programming interface
 * @export
 */
export const TodoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary IDでTodoを削除する
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DeleteTodoById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTodo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeleteTodoById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary IDでTodoを取得する
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GetTodoById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTodo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GetTodoById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 全てのTodoを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GetTodos(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTodos>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GetTodos(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Todoを作成する
         * @param {PostRequestTodo} postRequestTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PostTodos(postRequestTodo: PostRequestTodo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTodo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostTodos(postRequestTodo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Todoを更新する
         * @param {PutRequestTodo} putRequestTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PutTodos(putRequestTodo: PutRequestTodo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTodo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PutTodos(putRequestTodo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TodoApi - factory interface
 * @export
 */
export const TodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodoApiFp(configuration)
    return {
        /**
         * 
         * @summary IDでTodoを削除する
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DeleteTodoById(id: number, options?: any): AxiosPromise<ResponseTodo> {
            return localVarFp.apiV1DeleteTodoById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary IDでTodoを取得する
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GetTodoById(id: number, options?: any): AxiosPromise<ResponseTodo> {
            return localVarFp.apiV1GetTodoById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 全てのTodoを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GetTodos(options?: any): AxiosPromise<ResponseTodos> {
            return localVarFp.apiV1GetTodos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Todoを作成する
         * @param {PostRequestTodo} postRequestTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostTodos(postRequestTodo: PostRequestTodo, options?: any): AxiosPromise<ResponseTodo> {
            return localVarFp.apiV1PostTodos(postRequestTodo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Todoを更新する
         * @param {PutRequestTodo} putRequestTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PutTodos(putRequestTodo: PutRequestTodo, options?: any): AxiosPromise<ResponseTodo> {
            return localVarFp.apiV1PutTodos(putRequestTodo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodoApi - object-oriented interface
 * @export
 * @class TodoApi
 * @extends {BaseAPI}
 */
export class TodoApi extends BaseAPI {
    /**
     * 
     * @summary IDでTodoを削除する
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public apiV1DeleteTodoById(id: number, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).apiV1DeleteTodoById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary IDでTodoを取得する
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public apiV1GetTodoById(id: number, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).apiV1GetTodoById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 全てのTodoを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public apiV1GetTodos(options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).apiV1GetTodos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Todoを作成する
     * @param {PostRequestTodo} postRequestTodo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public apiV1PostTodos(postRequestTodo: PostRequestTodo, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).apiV1PostTodos(postRequestTodo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Todoを更新する
     * @param {PutRequestTodo} putRequestTodo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public apiV1PutTodos(putRequestTodo: PutRequestTodo, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).apiV1PutTodos(putRequestTodo, options).then((request) => request(this.axios, this.basePath));
    }
}


